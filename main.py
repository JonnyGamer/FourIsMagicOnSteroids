# This Python Program finds solutions for A058230

magic = [
5, 5, 5, 6, 9, 9, 8, 8, 7, 7, 7, 9, 10, 10, 15, 11, 9, 13, 11, 12, 10, 12, 13, 14, 18, 14, 13, 16, 14, 15,
11, 13, 14, 15, 19, 15, 14, 17, 15, 16, 14, 16, 17, 18, 22, 18, 17, 20, 18, 19, 15, 17, 18, 19, 23, 19, 18, 21, 19, 20,
12, 14, 15, 16, 20, 16, 15, 18, 16, 17, 14, 16, 17, 18, 22, 18, 17, 20, 18, 19, 12, 14, 15, 16, 20, 16, 15, 18, 16, 17,
12, 14, 15, 16, 20, 16, 15, 18, 16, 17, 8, 10, 11, 12, 16, 12, 11, 14, 12, 13, 12, 14, 15, 16, 20, 16, 15, 18, 16, 17,
15, 17, 18, 19, 23, 19, 18, 21, 19, 20, 16, 18, 19, 20, 24, 20, 19, 22, 20, 21, 19, 21, 22, 23, 27, 23, 22, 25, 23, 24,
20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 17, 19, 20, 21, 25, 21, 20, 23, 21, 22, 19, 21, 22, 23, 27, 23, 22, 25, 23, 24,
17, 19, 20, 21, 25, 21, 20, 23, 21, 22, 17, 19, 20, 21, 25, 21, 20, 23, 21, 22, 10, 12, 13, 14, 18, 14, 13, 16, 14, 15,
14, 16, 17, 18, 22, 18, 17, 20, 18, 19, 17, 19, 20, 21, 25, 21, 20, 23, 21, 22, 18, 20, 21, 22, 26, 22, 21, 24, 22, 23,
21, 23, 24, 25, 29, 25, 24, 27, 25, 26, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 19, 21, 22, 23, 27, 23, 22, 25, 23, 24,
21, 23, 24, 25, 29, 25, 24, 27, 25, 26, 19, 21, 22, 23, 27, 23, 22, 25, 23, 24, 19, 21, 22, 23, 27, 23, 22, 25, 23, 24,
11, 13, 14, 15, 19, 15, 14, 17, 15, 16, 15, 17, 18, 19, 23, 19, 18, 21, 19, 20, 18, 20, 21, 22, 26, 22, 21, 24, 22, 23,
19, 21, 22, 23, 27, 23, 22, 25, 23, 24, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 23, 25, 26, 27, 31, 27, 26, 29, 27, 28,
20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 20, 22, 23, 24, 28, 24, 23, 26, 24, 25,
20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 15, 17, 18, 19, 23, 19, 18, 21, 19, 20, 19, 21, 22, 23, 27, 23, 22, 25, 23, 24,
22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 23, 25, 26, 27, 31, 27, 26, 29, 27, 28, 26, 28, 29, 30, 34, 30, 29, 32, 30, 31,
27, 29, 30, 31, 35, 31, 30, 33, 31, 32, 24, 26, 27, 28, 32, 28, 27, 30, 28, 29, 26, 28, 29, 30, 34, 30, 29, 32, 30, 31,
24, 26, 27, 28, 32, 28, 27, 30, 28, 29, 24, 26, 27, 28, 32, 28, 27, 30, 28, 29, 12, 14, 15, 16, 20, 16, 15, 18, 16, 17,
16, 18, 19, 20, 24, 20, 19, 22, 20, 21, 19, 21, 22, 23, 27, 23, 22, 25, 23, 24, 20, 22, 23, 24, 28, 24, 23, 26, 24, 25,
23, 25, 26, 27, 31, 27, 26, 29, 27, 28, 24, 26, 27, 28, 32, 28, 27, 30, 28, 29, 21, 23, 24, 25, 29, 25, 24, 27, 25, 26,
23, 25, 26, 27, 31, 27, 26, 29, 27, 28, 21, 23, 24, 25, 29, 25, 24, 27, 25, 26, 21, 23, 24, 25, 29, 25, 24, 27, 25, 26,
11, 13, 14, 15, 19, 15, 14, 17, 15, 16, 15, 17, 18, 19, 23, 19, 18, 21, 19, 20, 18, 20, 21, 22, 26, 22, 21, 24, 22, 23,
19, 21, 22, 23, 27, 23, 22, 25, 23, 24, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 23, 25, 26, 27, 31, 27, 26, 29, 27, 28,
20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 20, 22, 23, 24, 28, 24, 23, 26, 24, 25,
20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 14, 16, 17, 18, 22, 18, 17, 20, 18, 19, 18, 20, 21, 22, 26, 22, 21, 24, 22, 23,
21, 23, 24, 25, 29, 25, 24, 27, 25, 26, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 25, 27, 28, 29, 33, 29, 28, 31, 29, 30,
26, 28, 29, 30, 34, 30, 29, 32, 30, 31, 23, 25, 26, 27, 31, 27, 26, 29, 27, 28, 25, 27, 28, 29, 33, 29, 28, 31, 29, 30,
23, 25, 26, 27, 31, 27, 26, 29, 27, 28, 23, 25, 26, 27, 31, 27, 26, 29, 27, 28, 13, 15, 16, 17, 21, 17, 16, 19, 17, 18,
17, 19, 20, 21, 25, 21, 20, 23, 21, 22, 20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 21, 23, 24, 25, 29, 25, 24, 27, 25, 26,
24, 26, 27, 28, 32, 28, 27, 30, 28, 29, 25, 27, 28, 29, 33, 29, 28, 31, 29, 30, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27,
24, 26, 27, 28, 32, 28, 27, 30, 28, 29, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27,
11, 13, 14, 15, 19, 15, 14, 17, 15, 16, 15, 17, 18, 19, 23, 19, 18, 21, 19, 20, 18, 20, 21, 22, 26, 22, 21, 24, 22, 23,
19, 21, 22, 23, 27, 23, 22, 25, 23, 24, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 23, 25, 26, 27, 31, 27, 26, 29, 27, 28,
20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 22, 24, 25, 26, 30, 26, 25, 28, 26, 27, 20, 22, 23, 24, 28, 24, 23, 26, 24, 25,
20, 22, 23, 24, 28, 24, 23, 26, 24, 25, 10
]

threeDigit = [
-1, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8, 6, 18, 18, 30, 24, 24, 18, 30, 30, 24, 6, 18, 18, 30, 24, 24,
18, 30, 30, 24, 5, 15, 15, 25, 20, 20, 15, 25, 25, 20, 5, 15, 15, 25, 20, 20, 15, 25, 25, 20, 5, 15, 15, 25, 20, 20, 15, 25,
25, 20, 7, 21, 21, 35, 28, 28, 21, 35, 35, 28, 6, 18, 18, 30, 24, 24, 18, 30, 30, 24, 6, 18, 18, 30, 24, 24, 18, 30, 30, 24,
21, 63, 63, 105, 84, 84, 63, 105, 105, 84, 63, 126, 126, 168, 168, 147, 147, 189, 168, 168, 126, 378, 378, 630, 504, 504, 378,
630, 630, 504, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 105, 315, 315, 525, 420, 420, 315, 525, 525, 420, 105, 315, 315,
525, 420, 420, 315, 525, 525, 420, 105, 315, 315, 525, 420, 420, 315, 525, 525, 420, 147, 441, 441, 735, 588, 588, 441, 735, 735,
588, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 21, 63, 63, 105, 84, 84,
63, 105, 105, 84, 63, 126, 126, 168, 168, 147, 147, 189, 168, 168, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 126, 378, 378,
630, 504, 504, 378, 630, 630, 504, 105, 315, 315, 525, 420, 420, 315, 525, 525, 420, 105, 315, 315, 525, 420, 420, 315, 525, 525,
420, 105, 315, 315, 525, 420, 420, 315, 525, 525, 420, 147, 441, 441, 735, 588, 588, 441, 735, 735, 588, 126, 378, 378, 630, 504,
504, 378, 630, 630, 504, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 35, 105, 105, 175, 140, 140, 105, 175, 175, 140, 105,
210, 210, 280, 280, 245, 245, 315, 280, 280, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 210, 630, 630, 1050, 840, 840,
630, 1050, 1050, 840, 175, 525, 525, 875, 700, 700, 525, 875, 875, 700, 175, 525, 525, 875, 700, 700, 525, 875, 875, 700, 175,
525, 525, 875, 700, 700, 525, 875, 875, 700, 245, 735, 735, 1225, 980, 980, 735, 1225, 1225, 980, 210, 630, 630, 1050, 840, 840,
630, 1050, 1050, 840, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 28, 84, 84, 140, 112, 112, 84, 140, 140, 112, 84, 168,
168, 224, 224, 196, 196, 252, 224, 224, 168, 504, 504, 840, 672, 672, 504, 840, 840, 672, 168, 504, 504, 840, 672, 672, 504, 840,
840, 672, 140, 420, 420, 700, 560, 560, 420, 700, 700, 560, 140, 420, 420, 700, 560, 560, 420, 700, 700, 560, 140, 420, 420, 700,
560, 560, 420, 700, 700, 560, 196, 588, 588, 980, 784, 784, 588, 980, 980, 784, 168, 504, 504, 840, 672, 672, 504, 840, 840, 672,
168, 504, 504, 840, 672, 672, 504, 840, 840, 672, 28, 84, 84, 140, 112, 112, 84, 140, 140, 112, 84, 168, 168, 224, 224, 196, 196,
252, 224, 224, 168, 504, 504, 840, 672, 672, 504, 840, 840, 672, 168, 504, 504, 840, 672, 672, 504, 840, 840, 672, 140, 420, 420,
700, 560, 560, 420, 700, 700, 560, 140, 420, 420, 700, 560, 560, 420, 700, 700, 560, 140, 420, 420, 700, 560, 560, 420, 700, 700,
560, 196, 588, 588, 980, 784, 784, 588, 980, 980, 784, 168, 504, 504, 840, 672, 672, 504, 840, 840, 672, 168, 504, 504, 840, 672,
672, 504, 840, 840, 672, 21, 63, 63, 105, 84, 84, 63, 105, 105, 84, 63, 126, 126, 168, 168, 147, 147, 189, 168, 168, 126, 378, 378,
630, 504, 504, 378, 630, 630, 504, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 105, 315, 315, 525, 420, 420, 315, 525, 525,
420, 105, 315, 315, 525, 420, 420, 315, 525, 525, 420, 105, 315, 315, 525, 420, 420, 315, 525, 525, 420, 147, 441, 441, 735, 588,
588, 441, 735, 735, 588, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 126, 378, 378, 630, 504, 504, 378, 630, 630, 504, 35,
105, 105, 175, 140, 140, 105, 175, 175, 140, 105, 210, 210, 280, 280, 245, 245, 315, 280, 280, 210, 630, 630, 1050, 840, 840, 630,
1050, 1050, 840, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 175, 525, 525, 875, 700, 700, 525, 875, 875, 700, 175, 525,
525, 875, 700, 700, 525, 875, 875, 700, 175, 525, 525, 875, 700, 700, 525, 875, 875, 700, 245, 735, 735, 1225, 980, 980, 735, 1225,
1225, 980, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 35, 105, 105,
175, 140, 140, 105, 175, 175, 140, 105, 210, 210, 280, 280, 245, 245, 315, 280, 280, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050,
840, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 175, 525, 525, 875, 700, 700, 525, 875, 875, 700, 175, 525, 525, 875, 700,
700, 525, 875, 875, 700, 175, 525, 525, 875, 700, 700, 525, 875, 875, 700, 245, 735, 735, 1225, 980, 980, 735, 1225, 1225, 980, 210,
630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 210, 630, 630, 1050, 840, 840, 630, 1050, 1050, 840, 28, 84, 84, 140, 112, 112, 84,
140, 140, 112, 84, 168, 168, 224, 224, 196, 196, 252, 224, 224, 168, 504, 504, 840, 672, 672, 504, 840, 840, 672, 168, 504, 504, 840,
672, 672, 504, 840, 840, 672, 140, 420, 420, 700, 560, 560, 420, 700, 700, 560, 140, 420, 420, 700, 560, 560, 420, 700, 700, 560, 140,
420, 420, 700, 560, 560, 420, 700, 700, 560, 196, 588, 588, 980, 784, 784, 588, 980, 980, 784, 168, 504, 504, 840, 672, 672, 504, 840,
840, 672, 168, 504, 504, 840, 672, 672, 504, 840, 840, 672
]

import locale
from functools import reduce
locale.setlocale(locale.LC_ALL, 'en_US')
def illion(n):
    if n < 1: return [1, 8][n+1]
    if n < 1000: return magic[n] + 2
    a = locale.format_string('%d', n, True).split(",")
    b = [magic[int(i)] for i in a]
    return sum(b) + 2
def fourFour(n):
    a = locale.format_string('%d', n, True).split(",")[::-1]
    b = [threeDigit[int(i)] * illion(ind-1) for (ind, i) in enumerate(a)]
    b = [x for x in b if x > 0]
    return reduce(lambda x, y: x*y, b)

# Extra Credit
def fourFourLoop(n):
    a = []
    while n not in a:
        a.append(n)
        n = fourFour(n)
    return n

# Tests should all print True
print(4 == fourFour(4))
print(24 == fourFour(24))
print(84672 == fourFour(84672))
print(1852200 == fourFour(1852200))
print(829785600 == fourFour(829785600))
print(20910597120 == fourFour(20910597120))
print(92215733299200 == fourFour(92215733299200))
print(1239789303244800000 == fourFour(1239789303244800000))
print(887165996513213819259682435576627200000000 == fourFour(887165996513213819259682435576627200000000))

##########################################
# The code below searches for solutions: #
##########################################

# This function basically turns my `threeDigit` list into a set
def generateTreble():
    t = set()
    for i in range(1, 1000):
        t.add(fourFour(i))
    return t
  
treble = generateTreble()
# Should be equal to this: {1, 3, 4, 5, 6, 7, 8, 9, 15, 18, 20, 21, 24, 25, 28, 30, 35, 63, 84, 105, 112, 126, 140, 147, 168, 175, 189, 196, 210, 224, 245, 252, 280, 315, 378, 420, 441, 504, 525, 560, 588, 630, 672, 700, 735, 784, 840, 875, 980, 1050, 1225}

copyTreble = set(treble)
print(len(copyTreble))

found = []

def findNewTreble(copyTreble, illionValue):
    newTrebles = set(copyTreble)
    for i in treble:
        for j in copyTreble:
            val = illionValue * i * j
            newVal = fourFour(val)
            if val == newVal and val not in found:
                print("Found solution:", val)
                found.append(val)
            newTrebles.add(newVal)
    return newTrebles

i = 1
while True:
    copyTreble = findNewTreble(copyTreble, illions[i])
    print("")
    print(len(copyTreble), "cached numbers exist.")
    print("No more solutions less than 10 ^", 3 * i + 3)
    print("")
    i += 1

# I ran this program until it printed: No more solutions less than 10 ^138 exist.
# It found the solutions A058230(1) through A058230(10)
